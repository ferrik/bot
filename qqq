from flask import Flask, request, jsonify

import os

import logging

import requests

import gspread

from google.oauth2 import service_account

from concurrent.futures import ThreadPoolExecutor

from datetime import datetime

import json

import traceback

import re

import google.generativeai as genai



# ---------- APP ----------

app = Flask(__name__)



# ---------- CONFIG ----------

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

REQUESTS_TIMEOUT = 10

EXECUTOR = ThreadPoolExecutor(max_workers=5)



# ---------- ENV ----------

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()

SERVICE_ACCOUNT_KEY_PATH = os.environ.get("SERVICE_ACCOUNT_KEY_PATH", "").strip()

GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()

OPERATOR_CHAT_ID = os.environ.get("OPERATOR_CHAT_ID", "").strip()

GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY", "").strip()



try:

if OPERATOR_CHAT_ID:

OPERATOR_CHAT_ID = int(OPERATOR_CHAT_ID)

except Exception:

logging.warning("OPERATOR_CHAT_ID –∑–∞–ª–∏—à–µ–Ω–æ —è–∫ —Ä—è–¥–æ–∫ (–Ω–µ int).")



logging.info("ENV: TELEGRAM_BOT_TOKEN loaded: %s", bool(TELEGRAM_BOT_TOKEN))

logging.info("ENV: SERVICE_ACCOUNT_KEY_PATH loaded: %s", bool(SERVICE_ACCOUNT_KEY_PATH))

logging.info("ENV: GOOGLE_SHEET_ID loaded: %s", bool(GOOGLE_SHEET_ID))

logging.info("ENV: OPERATOR_CHAT_ID loaded: %s", bool(OPERATOR_CHAT_ID))

logging.info("ENV: GEMINI_API_KEY loaded: %s", bool(GEMINI_API_KEY))



# ---------- Gemini AI & Prompts ----------

if GEMINI_API_KEY:

genai.configure(api_key=GEMINI_API_KEY)

logging.info("Gemini API Key configured.")

else:

logging.warning("Gemini API Key not found. AI features will be disabled.")



# –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç, —â–æ –≤–∏–∑–Ω–∞—á–∞—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É –º–æ–¥–µ–ª—ñ

SYSTEM_PROMPT = """

–¢–∏ ‚Äî –¥—Ä—É–∂–Ω—ñ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram food-–±–æ—Ç–∞. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —à–≤–∏–¥–∫–æ —ñ –∫–æ—Ä–∏—Å–Ω–æ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –≤–∏–±–æ—Ä–æ–º —Å—Ç—Ä–∞–≤, –ø—ñ–¥–±–æ—Ä–æ–º –ø–æ –±—é–¥–∂–µ—Ç—É, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø—Ä–æ—Å—Ç–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è–º–∏.

–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏:

- –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –ø—Ä–æ—Å—Ç–∏–º–∏ —Ä–µ—á–µ–Ω–Ω—è–º–∏, —ñ–Ω–æ–¥—ñ –¥–æ–¥–∞–≤–∞–π –µ–º–æ–¥–∑—ñ (–∞–ª–µ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞—Ä–∞–π—Å—è).

- –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ.

- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –ø–æ—Ä–∞–¥—É ‚Äî –∑–∞–≤–∂–¥–∏ –ø—Ä–æ–ø–æ–Ω—É–π 2‚Äì4 –≤–∞—Ä—ñ–∞–Ω—Ç–∏.

- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–µ—Ä–µ–¥–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –º–µ–Ω—é (menu_snippet) —ñ –≤—ñ–¥—Å—ñ–∫–∞–π –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó.

- –ù–µ –≤–∏–≥–∞–¥—É–π –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤, —Ü—ñ–Ω –∞–±–æ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: —è–∫—â–æ –Ω–µ –∑–Ω–∞—î—à ‚Äî –∫–∞–∂–∏, —â–æ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.

- –¢–≤–æ—è –≥–æ–ª–æ–≤–Ω–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ JSON –∑ –¥—ñ—î—é –¥–ª—è –±–æ—Ç–∞.

"""



def analyze_user_request_with_gemini(user_text, menu_items):

"""

–ê–Ω–∞–ª—ñ–∑—É—î –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç.

"""

if not GEMINI_API_KEY:

logging.error("Gemini API not configured.")

return None



menu_for_prompt = "\n".join([

f"ID: {item.get('ID')}, –ù–∞–∑–≤–∞: {item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏')}, –¶—ñ–Ω–∞: {item.get('–¶—ñ–Ω–∞')}, –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è')}"

for item in menu_items if (item.get('–ê–∫—Ç–∏–≤–Ω–∏–π') or '–¢–∞–∫').lower() == '—Ç–∞–∫'

])



# –§–æ—Ä–º—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤

full_prompt = f"""

{SYSTEM_PROMPT}



–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–æ–≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.

–ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{user_text}"



–û—Å—å –¥–æ—Å—Ç—É–ø–Ω–µ –º–µ–Ω—é:

---

{menu_for_prompt}

---



–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —â–æ —Ö–æ—á–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –û–î–ù–£ –∑ —Ç—Ä—å–æ—Ö –¥—ñ–π —É JSON:

1. 'add_to_cart': —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ —â–æ—Å—å —É –∫–æ—à–∏–∫. –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –≤–∫–∞–∂–∏ ID —Ç–æ–≤–∞—Ä—É —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å.

2. 'question': —è–∫—â–æ —Ü–µ –ø—Ä–æ—Ö–∞–Ω–Ω—è –ø–æ—Ä–∞–¥–∏, –ø–æ—à—É–∫ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º, —É—Ç–æ—á–Ω–µ–Ω–Ω—è –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è. –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –∑–≥–µ–Ω–µ—Ä—É–π –≥–æ—Ç–æ–≤—É —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø–æ–ª—ñ "reply".

3. 'error': —è–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π.



–ü—Ä–∏–∫–ª–∞–¥–∏ —Ç–æ–≥–æ, —è–∫ —Ç–∏ –º–∞—î—à –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ —ñ —è–∫–∏–π JSON –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏:



# –ü—Ä–∏–∫–ª–∞–¥ A - –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –ø–æ–∑–∏—Ü—ñ–π

- –ó–∞–ø–∏—Ç: "–¥–≤—ñ –ø—ñ—Ü–∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞ —ñ –æ–¥–Ω—É –ø–µ–ø—Å—ñ"

- JSON: {{"action": "add_to_cart", "items": [{{"id": "ID_–º–∞—Ä–≥–∞—Ä–∏—Ç–∏", "quantity": 2}}, {{"id": "ID_–ø–µ–ø—Å—ñ", "quantity": 1}}], "reply": "–î–æ–±—Ä–µ, –¥–æ–¥–∞—é 2 –ú–∞—Ä–≥–∞—Ä–∏—Ç–∏ —Ç–∞ 1 –ü–µ–ø—Å—ñ –¥–æ –∫–æ—à–∏–∫–∞."}}



# –ü—Ä–∏–∫–ª–∞–¥ B - –ü–æ—Ä–∞–¥–∞ –∑–∞ —Ç–∏–ø–æ–º —Å—Ç—Ä–∞–≤–∏

- –ó–∞–ø–∏—Ç: "–©–æ –ø–æ—Ä–∞–¥–∏—à –Ω–∞ –≤–µ—á–µ—Ä—é? –õ—é–±–ª—é –ø—ñ—Ü—É, –∞–ª–µ –Ω–µ —Ö–æ—á—É –≤–∞–∂–∫–æ–≥–æ"

- JSON: {{"action": "question", "reply": "–°–ø—Ä–æ–±—É–π—Ç–µ –ª–µ–≥–∫—É –ú–∞—Ä–≥–∞—Ä–∏—Ç—É (—Ç–æ–Ω–∫–∞ –æ—Å–Ω–æ–≤–∞, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, –±–∞–∑–∏–ª—ñ–∫) ‚Äî –≤–æ–Ω–∞ –Ω–µ –Ω–∞–¥—Ç–æ –∂–∏—Ä–Ω–∞. –ê–±–æ, —è–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É, —Å–∞–ª–∞—Ç '–¶–µ–∑–∞—Ä' –∑ –∫—É—Ä–∫–æ—é ‚Äî —Å–∏—Ç–Ω–æ, –∞–ª–µ –ª–µ–≥—à–µ –∑–∞ –ø—ñ—Ü—É. üçΩÔ∏è"}}



# –ü—Ä–∏–∫–ª–∞–¥ C - –ü–æ—Ä–∞–¥–∞ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º

- –ó–∞–ø–∏—Ç: "–©–æ –ø–æ—Ä–∞–¥–∏—Ç–µ –Ω–∞ 400 –≥—Ä–Ω?"

- JSON: {{"action": "question", "reply": "–ù–∞ 400 –≥—Ä–Ω –º–æ–∂—É –ø–æ—Ä–∞–¥–∏—Ç–∏: 1) –°–µ—Ç —Å—É—à—ñ '–§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è' (8 —à—Ç.) –∑–∞ 350 –≥—Ä–Ω ‚Äî —á—É–¥–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ. 2) –ü—ñ—Ü–∞ '–ì–∞–≤–∞–π—Å—å–∫–∞' (–º–∞–ª–µ–Ω—å–∫–∞) + –ö–æ–ª–∞ ‚Äî —Ä–∞–∑–æ–º –≤–∏–π–¥–µ –±–ª–∏–∑—å–∫–æ 380 –≥—Ä–Ω. –©–æ –≤–∞–º –±—ñ–ª—å—à–µ –¥–æ –≤–ø–æ–¥–æ–±–∏?"}}



# –ü—Ä–∏–∫–ª–∞–¥ D - –£—Ç–æ—á–Ω—é—é—á–µ –ø–∏—Ç–∞–Ω–Ω—è

- –ó–∞–ø–∏—Ç: "–Ø –≤–µ–≥–∞–Ω. –©–æ —î?"

- JSON: {{"action": "question", "reply": "–ß—É–¥–æ–≤–æ! üîé –£ –Ω–∞—Å —î –∫—ñ–ª—å–∫–∞ –≤–µ–≥–∞–Ω—Å—å–∫–∏—Ö –ø–æ–∑–∏—Ü—ñ–π. –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏: –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–∞ —Å—Ç—Ä–∞–≤–∞ —á–∏ –∑–∞–∫—É—Å–∫–∞?"}}


# –ü—Ä–∏–∫–ª–∞–¥ E - –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π –∑–∞–ø–∏—Ç

- –ó–∞–ø–∏—Ç: "–∞–ª–æ–ª–æ–∞–æ"

- JSON: {{"action": "error", "reply": "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –ú–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∞–±–æ –æ–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –º–µ–Ω—é."}}



–¢–µ–ø–µ—Ä –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{user_text}" —ñ –ø–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON.

"""



try:

model = genai.GenerativeModel('gemini-1.5-flash-latest')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ, —è–∫ –≤–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞–ª–∏

generation_config = genai.types.GenerationConfig(

max_output_tokens=350,

temperature=0.6

)

response = model.generate_content(full_prompt, generation_config=generation_config)


cleaned_response = response.text.strip().replace("```json", "").replace("```", "").strip()

logging.info(f"Gemini cleaned response: {cleaned_response}")

return json.loads(cleaned_response)

except Exception as e:

logging.error(f"Gemini request failed: {e}\nResponse text: {response.text if 'response' in locals() else 'N/A'}")

return None



# ---------- Google Sheets, State, and other helpers... (–∫–æ–¥ –±–µ–∑ –∑–º—ñ–Ω) ----------

SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

gc = None

spreadsheet = None

menu_cache = []

last_cache_time = None

CACHE_TIMEOUT = 3600



states = {}

carts = {}



def init_gspread_client():

global gc, spreadsheet

logging.info("init_gspread_client: start")

try:

if not SERVICE_ACCOUNT_KEY_PATH or not os.path.exists(SERVICE_ACCOUNT_KEY_PATH):

logging.error("Service account key file not found at: %s", SERVICE_ACCOUNT_KEY_PATH)

return False

creds = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_KEY_PATH, scopes=SCOPE)

gc = gspread.authorize(creds)

spreadsheet = gc.open_by_key(GOOGLE_SHEET_ID)

logging.info("init_gspread_client: connected")

return True

except Exception as e:

logging.error("init_gspread_client error: %s", e)

gc = spreadsheet = None

return False



def update_menu_cache(force=False):

global menu_cache, last_cache_time

try:

if not spreadsheet and not init_gspread_client():

logging.warning("update_menu_cache: cannot init spreadsheet")

return

if not force and last_cache_time and (datetime.now() - last_cache_time).total_seconds() < CACHE_TIMEOUT:

return

logging.info("update_menu_cache: loading '–ú–µ–Ω—é' worksheet")

ws = spreadsheet.worksheet("–ú–µ–Ω—é")

records = ws.get_all_records()

processed = []

for rec in records:

item = {k: v for k, v in rec.items() if k}

if '–ù–∞–∑–≤–∞' in item and '–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏' not in item:

item['–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏'] = item.get('–ù–∞–∑–≤–∞')

item['–ê–∫—Ç–∏–≤–Ω–∏–π'] = item.get('–ê–∫—Ç–∏–≤–Ω–∏–π', "–¢–∞–∫")

item['ID'] = str(item.get('ID')) if item.get('ID') is not None else None

try:

price_str = str(item.get('–¶—ñ–Ω–∞', '0')).strip().replace(',', '.')

item['–¶—ñ–Ω–∞'] = float(price_str) if price_str else 0.0

except (ValueError, TypeError):

item['–¶—ñ–Ω–∞'] = 0.0

item.setdefault('–û–ø–∏—Å', "")

item.setdefault('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")

processed.append(item)

menu_cache = processed

last_cache_time = datetime.now()

logging.info("update_menu_cache: cached %d items", len(menu_cache))

except gspread.exceptions.WorksheetNotFound:

logging.error("update_menu_cache: worksheet '–ú–µ–Ω—é' not found")

menu_cache = []

except Exception as e:

logging.error("update_menu_cache error: %s", e)

menu_cache = []



def get_item_by_id(item_id):

update_menu_cache()

for it in menu_cache:

if str(it.get('ID')) == str(item_id):

return it

return None



def send_telegram_message(chat_id, text, reply_markup=None, parse_mode="HTML"):

if not TELEGRAM_BOT_TOKEN: return None

url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

payload = {"chat_id": chat_id, "text": text, "parse_mode": parse_mode}

if reply_markup: payload["reply_markup"] = reply_markup

try:

r = requests.post(url, json=payload, timeout=REQUESTS_TIMEOUT)

r.raise_for_status()

return r.json().get("result", {}).get("message_id")

except Exception as e:

logging.error("send_telegram_message error: %s", e)

return None



def send_telegram_photo(chat_id, photo_url, caption, reply_markup=None, parse_mode="HTML"):

if not TELEGRAM_BOT_TOKEN: return None

url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"

payload = {"chat_id": chat_id, "photo": photo_url, "caption": caption, "parse_mode": parse_mode}

if reply_markup: payload["reply_markup"] = reply_markup

try:

r = requests.post(url, json=payload, timeout=REQUESTS_TIMEOUT)

r.raise_for_status()

return r.json().get("result", {}).get("message_id")

except Exception as e:

logging.error("send_telegram_photo error: %s", e)

return None



def answer_callback_query(callback_query_id, text=None, show_alert=False):

if not TELEGRAM_BOT_TOKEN: return

try:

requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery",

json={"callback_query_id": callback_query_id, "text": text, "show_alert": show_alert},

timeout=REQUESTS_TIMEOUT)

except Exception as e:

logging.debug("answer_callback_query failed: %s", e)



def get_main_keyboard():

return {

"keyboard": [

[{"text":"üçï –ü—ñ—Ü–∞"},{"text":"üç£ –°—É—à—ñ"}],

[{"text":"ü•ó –°–∞–ª–∞—Ç–∏"},{"text":"ü•§ –ù–∞–ø–æ—ó"}],

[{"text":"üç∞ –î–µ—Å–µ—Ä—Ç–∏"},{"text":"üí∞ –ë—é–¥–∂–µ—Ç"}],

[{"text":"üõí –ú—ñ–π –∫–æ—à–∏–∫"},{"text":"üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"}]

], "resize_keyboard": True

}



def show_cart(chat_id):

cart = carts.get(chat_id, {"items":[]})

items = cart.get("items", [])

if not items:

send_telegram_message(chat_id, "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üõí", reply_markup=get_main_keyboard())

return

total = sum(float(it.get("price", 0.0)) * int(it.get("qty", 0)) for it in items)

text = "<b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n"

inline = []

for idx, it in enumerate(items):

subtotal = float(it.get("price", 0.0)) * int(it.get("qty", 0))

text += f"{it.get('name')} ‚Äî {it.get('qty')}√ó{it.get('price')} = {subtotal:.2f} –≥—Ä–Ω\n"

inline.append([

{"text":"‚ûñ","callback_data":f"qty_minus_{idx}"},

{"text":f"{it.get('qty')}","callback_data":f"qty_info_{idx}"},

{"text":"‚ûï","callback_data":f"qty_plus_{idx}"},

{"text":"üóëÔ∏è","callback_data":f"remove_item_{idx}"}

])

text += f"\n<b>–í—Å—å–æ–≥–æ: {total:.2f} –≥—Ä–Ω</b>"

inline.append([{"text":"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è","callback_data":"checkout"}])

inline.append([{"text":"üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫","callback_data":"clear_all_cart"}])

send_telegram_message(chat_id, text, reply_markup={"inline_keyboard": inline})



def add_item_to_cart(chat_id, item_id, show_cart_after=True):

selected = get_item_by_id(item_id)

if not selected:

if show_cart_after: send_telegram_message(chat_id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

return

carts.setdefault(chat_id, {"items":[], "address":"", "phone":"", "payment_method":""})

items = carts[chat_id]["items"]

for it in items:

if str(it.get("id")) == str(selected.get("ID")):

it["qty"] = it.get("qty", 0) + 1

break

else:

items.append({"id": selected.get("ID"), "name": selected.get("–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏", "N/A"), "price": selected.get("–¶—ñ–Ω–∞", 0.0), "qty": 1})

if show_cart_after:

send_telegram_message(chat_id, f"'{selected.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', 'N/A')}' –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.")

show_cart(chat_id)



def handle_cart_quantity_change(chat_id, idx, change_type):

cart = carts.get(chat_id)

if not cart or not cart.get('items'): return

items = cart['items']

if 0 <= idx < len(items):

if change_type == 'plus': items[idx]['qty'] += 1

elif change_type == 'minus':

items[idx]['qty'] -= 1

if items[idx]['qty'] <= 0: del items[idx]

show_cart(chat_id)



def handle_remove_item_from_cart(chat_id, idx):

cart = carts.get(chat_id)

if not cart or not cart.get('items'): return

items = cart['items']

if 0 <= idx < len(items):

name = items.pop(idx).get('name', '–µ–ª–µ–º–µ–Ω—Ç')

send_telegram_message(chat_id, f"'{name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞.")

show_cart(chat_id)



def clear_all_user_cart(chat_id):

carts.pop(chat_id, None)

states.pop(chat_id, None)

send_telegram_message(chat_id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ.", reply_markup=get_main_keyboard())



def start_checkout_process(chat_id):

if not carts.get(chat_id, {}).get('items'):

send_telegram_message(chat_id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=get_main_keyboard())

return

states[chat_id] = 'waiting_address'

send_telegram_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup={'remove_keyboard': True})



def handle_address_input(chat_id, text):

text = (text or "").strip()

if len(text) < 5:

send_telegram_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∞–¥—Ä–µ—Å—É (–º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤).")

return

carts.setdefault(chat_id, {})['address'] = text

states[chat_id] = 'waiting_phone'

send_telegram_message(chat_id, "–î—è–∫—É—é! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")



def handle_phone_input(chat_id, text):

text = (text or "").strip()

if not re.match(r'^[+\d\s\-()]{7,20}$', text):

send_telegram_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")

return

carts.setdefault(chat_id, {})['phone'] = text

states[chat_id] = 'waiting_payment'

keyboard = {'inline_keyboard': [[{'text': 'üí≥ –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)', 'callback_data': 'payment_online'}], [{'text': 'üíµ –ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ', 'callback_data': 'payment_cash'}]]}

send_telegram_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=keyboard)



def handle_payment_method(chat_id, method_data):

method_map = {'payment_cash': "–ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ", 'payment_online': "–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞"}

display = method_map.get(method_data)

if not display:

states.pop(chat_id, None)

send_telegram_message(chat_id, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏.", reply_markup=get_main_keyboard())

return

carts.setdefault(chat_id, {})['payment_method'] = display

confirm_order(chat_id)



def confirm_order(chat_id):

order = carts.get(chat_id)

if not order or not order.get('items'):

send_telegram_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=get_main_keyboard())

return

total = sum(it['price'] * it['qty'] for it in order['items'])

items_summary = "\n".join([f"- {it['name']} ({it['qty']} —à—Ç.) - {it['price'] * it['qty']:.2f} –≥—Ä–Ω" for it in order['items']])

text = (f"<b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n{items_summary}\n\n<b>–í—Å—å–æ–≥–æ: {total:.2f} –≥—Ä–Ω</b>\n"

f"–ê–¥—Ä–µ—Å–∞: {order.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n–û–ø–ª–∞—Ç–∞: {order.get('payment_method', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}")

keyboard = {'inline_keyboard': [[{'text': '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', 'callback_data': 'confirm_final_order'}], [{'text': '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'callback_data': 'cancel_order_checkout'}]]}

states[chat_id] = 'awaiting_final_confirmation'

send_telegram_message(chat_id, text, reply_markup=keyboard)



def save_order_to_google_sheets(order_data):

logging.info("save_order_to_google_sheets: attempt to save order %s", order_data.get('order_id'))

try:

if not spreadsheet and not init_gspread_client(): return False

try:

ws = spreadsheet.worksheet("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")

except gspread.exceptions.WorksheetNotFound:

ws = spreadsheet.add_worksheet(title="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", rows="100", cols="10")

ws.append_row(['ID –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'Telegram User ID', '–ß–∞—Å', '–¢–æ–≤–∞—Ä–∏ (JSON)', '–°—É–º–∞', '–ê–¥—Ä–µ—Å–∞', '–¢–µ–ª–µ—Ñ–æ–Ω', '–û–ø–ª–∞—Ç–∞', '–°—Ç–∞—Ç—É—Å', '–ö–∞–Ω–∞–ª'])

items_json = json.dumps(order_data.get("items", []), ensure_ascii=False)

row = [order_data.get(k, "") for k in ['order_id', 'telegram_user_id', 'order_time', 'items_json', 'total_amount', 'address', 'phone', 'payment_method', 'status', 'channel']]

row[3] = items_json

ws.append_row(row)

logging.info("save_order_to_google_sheets: saved order %s", order_data.get('order_id'))

return True

except Exception as e:

logging.error("save_order_to_google_sheets error: %s", e)

return False



def finalize_order(chat_id):

order = carts.get(chat_id)

if not order or not order.get('items'):

send_telegram_message(chat_id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=get_main_keyboard())

return

timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

total_price = sum(it.get('price', 0.0) * it.get('qty', 0) for it in order['items'])

order_id = f"ORD-{datetime.now().strftime('%y%m%d%H%M')}-{chat_id % 1000}"

order_data = {'order_id': order_id, 'telegram_user_id': chat_id, 'order_time': timestamp, 'items': order['items'], 'total_amount': total_price, 'address': order.get('address', ''), 'phone': order.get('phone', ''), 'payment_method': order.get('payment_method', ''), 'status': '–ù–æ–≤–µ', 'channel': 'Telegram Bot'}

EXECUTOR.submit(save_order_to_google_sheets, order_data)

send_telegram_message(chat_id, "–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ ‚úÖ. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", reply_markup=get_main_keyboard())

if OPERATOR_CHAT_ID:

operator_summary = (f"üîî –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø üîî (ID: <b>{order_id}</b>)\n"

f"–í—ñ–¥: <code>{chat_id}</code>\n–°—É–º–∞: {total_price:.2f} –≥—Ä–Ω\n"

f"–ê–¥—Ä–µ—Å–∞: {order.get('address', 'N/A')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phone', 'N/A')}\n"

f"–û–ø–ª–∞—Ç–∞: {order.get('payment_method', 'N/A')}")

send_telegram_message(OPERATOR_CHAT_ID, operator_summary)

carts.pop(chat_id, None)

states.pop(chat_id, None)



def cancel_checkout(chat_id):

states.pop(chat_id, None)

send_telegram_message(chat_id, "–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_main_keyboard())



def contact_operator(chat_id):

states[chat_id] = 'operator_wait'

send_telegram_message(chat_id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup={'remove_keyboard': True})



def handle_message_to_operator(chat_id, message_text, user_first_name):

if OPERATOR_CHAT_ID:

operator_message = (f"‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ <b>{user_first_name}</b> (ID: <code>{chat_id}</code>):\n\n{message_text}")

send_telegram_message(OPERATOR_CHAT_ID, operator_message)

send_telegram_message(chat_id, "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_main_keyboard())

else:

send_telegram_message(chat_id, "–ù–∞—Ä–∞–∑—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.", reply_markup=get_main_keyboard())

states.pop(chat_id, None)



def start_budget_search(chat_id):

states[chat_id] = 'budget_wait'

send_telegram_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –±—é–¥–∂–µ—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ü—ñ–Ω—É):", reply_markup={'remove_keyboard': True})



def handle_budget_input(chat_id, budget_text):

try:

budget = float(budget_text.replace(',', '.'))

update_menu_cache()

found = [it for it in menu_cache if it.get('–¶—ñ–Ω–∞', 0.0) <= budget and (it.get('–ê–∫—Ç–∏–≤–Ω–∏–π', '–¢–∞–∫') or '').lower() == '—Ç–∞–∫']

if found:

send_telegram_message(chat_id, f"–ó–Ω–∞–π—à–æ–≤ {len(found)} —Å—Ç—Ä–∞–≤ —É –≤–∞—à–æ–º—É –±—é–¥–∂–µ—Ç—ñ:")

for it in found[:10]:

caption = f"<b>{it.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', 'N/A')}</b> - {it.get('–¶—ñ–Ω–∞', 0.0):.2f} –≥—Ä–Ω\n{it.get('–û–ø–∏—Å', '')}"

inline = [[{"text": f"‚ûï –î–æ–¥–∞—Ç–∏ ( {it.get('–¶—ñ–Ω–∞', 0.0):.2f} –≥—Ä–Ω )", "callback_data": f"add_to_cart_{it.get('ID')}"}]]

if it.get('–§–æ—Ç–æ URL'): send_telegram_photo(chat_id, it.get('–§–æ—Ç–æ URL'), caption, reply_markup={'inline_keyboard': inline})

else: send_telegram_message(chat_id, caption, reply_markup={'inline_keyboard': inline})

else:

send_telegram_message(chat_id, f"–ù–∞ –∂–∞–ª—å, –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±—é–¥–∂–µ—Ç—ñ –¥–æ {budget:.2f} –≥—Ä–Ω.", reply_markup=get_main_keyboard())

except ValueError:

send_telegram_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.", reply_markup=get_main_keyboard())

finally:

states.pop(chat_id, None)



# ---------- Update processor (background) ----------

def process_update(data):

try:

message = data.get('message')

callback_query = data.get('callback_query')

if callback_query:

answer_callback_query(callback_query.get('id'))

chat_id = callback_query.get('message', {}).get('chat', {}).get('id')

user_first_name = callback_query.get('from', {}).get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')

text = callback_query.get('data', '').strip()

is_callback = True

elif message:

chat_id = message.get('chat', {}).get('id')

user_first_name = message.get('from', {}).get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')

text = message.get('text', '').strip()

is_callback = False

else: return

current_state = states.get(chat_id)

logging.info("process_update: chat=%s state=%s text='%s' callback=%s", chat_id, current_state, text, is_callback)

if current_state:

if current_state == 'waiting_address': handle_address_input(chat_id, text); return

if current_state == 'waiting_phone': handle_phone_input(chat_id, text); return

if current_state == 'operator_wait': handle_message_to_operator(chat_id, text, user_first_name); return

if current_state == 'budget_wait': handle_budget_input(chat_id, text); return

if current_state == 'awaiting_final_confirmation' and not is_callback: send_telegram_message(chat_id, "–û—á—ñ–∫—É—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É."); return

if is_callback:

if text.startswith("add_to_cart_"): add_item_to_cart(chat_id, text.replace("add_to_cart_", "")); return

if text == "clear_all_cart": clear_all_user_cart(chat_id); return

if text == "checkout": start_checkout_process(chat_id); return

if text.startswith("payment_"): handle_payment_method(chat_id, text); return

if text == "confirm_final_order": finalize_order(chat_id); return

if text == "cancel_order_checkout": cancel_checkout(chat_id); return

if text == "back_to_main_menu": send_telegram_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_keyboard()); return

if text.startswith("qty_plus_"): handle_cart_quantity_change(chat_id, int(text.replace("qty_plus_", "")), 'plus'); return

if text.startswith("qty_minus_"): handle_cart_quantity_change(chat_id, int(text.replace("qty_minus_", "")), 'minus'); return

if text.startswith("remove_item_"): handle_remove_item_from_cart(chat_id, int(text.replace("remove_item_", ""))); return

return

if text:

if text == '/start': send_telegram_message(chat_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_first_name}! üëã –Ø ‚Äî –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏. –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –Ω–∞–ø–∏—à–∏, —â–æ —Ö–æ—á–µ—à –ø–æ—ó—Å—Ç–∏.", reply_markup=get_main_keyboard()); return

if text in ["üõí –ú—ñ–π –∫–æ—à–∏–∫", "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "üí∞ –ë—é–¥–∂–µ—Ç"]:

if text == "üõí –ú—ñ–π –∫–æ—à–∏–∫": show_cart(chat_id)

if text == "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º": contact_operator(chat_id)

if text == "üí∞ –ë—é–¥–∂–µ—Ç": start_budget_search(chat_id)

return

category_map = {"üçï –ü—ñ—Ü–∞": "–ü—ñ—Ü–∞", "üç£ –°—É—à—ñ": "–°—É—à—ñ", "ü•ó –°–∞–ª–∞—Ç–∏": "–°–∞–ª–∞—Ç–∏", "ü•§ –ù–∞–ø–æ—ó": "–ù–∞–ø–æ—ó", "üç∞ –î–µ—Å–µ—Ä—Ç–∏": "–î–µ—Å–µ—Ä—Ç–∏"}

if text in category_map:

clean_category = category_map[text]

update_menu_cache()

items = [it for it in menu_cache if (it.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') or "").lower() == clean_category.lower() and (it.get('–ê–∫—Ç–∏–≤–Ω–∏–π','–¢–∞–∫') or '').lower() == '—Ç–∞–∫']

if items:

for it in items[:10]:

caption = f"<b>{it.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏','N/A')}</b> ({it.get('–¶—ñ–Ω–∞',0.0):.2f} –≥—Ä–Ω)\n{it.get('–û–ø–∏—Å','')}"

inline = [[{"text": f"‚ûï –î–æ–¥–∞—Ç–∏", "callback_data": f"add_to_cart_{it.get('ID')}"}]]

photo_url = it.get('–§–æ—Ç–æ URL')

if photo_url: send_telegram_photo(chat_id, photo_url, caption, reply_markup={'inline_keyboard': inline})

else: send_telegram_message(chat_id, caption, reply_markup={'inline_keyboard': inline})

else: send_telegram_message(chat_id, f"–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {clean_category}.", reply_markup=get_main_keyboard())

return


# --- GEMINI INTEGRATION ---

update_menu_cache()

gemini_result = analyze_user_request_with_gemini(text, menu_cache)

if gemini_result:

action = gemini_result.get("action")

reply = gemini_result.get("reply")

if action == "add_to_cart":

items_to_add = gemini_result.get("items", [])

if reply: send_telegram_message(chat_id, reply)

for item in items_to_add:

for _ in range(item.get("quantity", 1)):

add_item_to_cart(chat_id, item.get("id"), show_cart_after=False)

show_cart(chat_id)

return

# ----- FIX: Added "search" to the handled actions -----

elif action in ["question", "error", "search"] and reply:

send_telegram_message(chat_id, reply, reply_markup=get_main_keyboard())

return


# Fallback to simple text search

logging.info("Gemini failed or unhandled, falling back to simple search.")

found = [it for it in menu_cache if text.lower() in (it.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏') or "").lower() and (it.get('–ê–∫—Ç–∏–≤–Ω–∏–π','–¢–∞–∫') or '').lower() == '—Ç–∞–∫']

if found:

send_telegram_message(chat_id, f"–ó–Ω–∞–π—à–æ–≤ –¥–µ—â–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º '{text}':")

for it in found[:5]:

caption = f"<b>{it.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏','N/A')}</b> ({it.get('–¶—ñ–Ω–∞',0.0):.2f} –≥—Ä–Ω)"

inline = [[{"text": f"‚ûï –î–æ–¥–∞—Ç–∏ ({it.get('–¶—ñ–Ω–∞',0.0):.2f} –≥—Ä–Ω)", "callback_data": f"add_to_cart_{it.get('ID')}"}]]

send_telegram_message(chat_id, caption, reply_markup={'inline_keyboard': inline})

else:

send_telegram_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ –Ω—ñ—á–æ–≥–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º. –ú–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é'.", reply_markup=get_main_keyboard())

return

except Exception as e:

logging.exception("process_update exception: %s", e)



# ---------- Webhook and other Flask routes... (–∫–æ–¥ –±–µ–∑ –∑–º—ñ–Ω) ----------

@app.route("/webhook", methods=["POST"])

def webhook():

logging.info("--- Webhook request received ---")

try:

data = request.get_json(silent=True)

if not data: return jsonify({"status":"empty"}), 200

EXECUTOR.submit(process_update, data)

return jsonify({"status":"ok"}), 200

except Exception as e:

logging.exception("webhook top-level error: %s", e)

return jsonify({"status":"error"}), 200



@app.route("/health", methods=["GET"])

def health():

return "OK", 200



@app.route("/set_webhook", methods=["GET"])

def set_webhook():

if not TELEGRAM_BOT_TOKEN:

return jsonify({"ok": False, "error": "TELEGRAM_BOT_TOKEN not set"}), 400

base = os.environ.get("PUBLIC_WEBHOOK_URL", f"https://{os.environ.get('PYTHONANYWHERE_DOMAIN', 'your-username.pythonanywhere.com')}")

webhook_url = f"{base}/webhook"

try:

r = requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook", params={"url": webhook_url}, timeout=REQUESTS_TIMEOUT)

return jsonify(r.json())

except Exception as e:

return jsonify({"ok": False, "error": str(e)}), 500



with app.app_context():

try:

init_gspread_client()

update_menu_cache(force=True)

except Exception as e:

logging.exception("startup error: %s", e)



if __name__ == "__main__":

app.run(debug=True, host="0.0.0.0", port=5000)
